managed implementation in class zbp_smit_i_travel_m unique;
strict ( 2 );

define behavior for ZSMIT_I_Travel_M alias travel
implementation in class zbp_smit_i_travel_m unique
persistent table zsmit_travel_m
with additional save
early numbering
lock master
authorization master ( global )
etag master last_changed_at
{
// Semantic Key field, which is readonly for the consumer, value is assigned in early numbering
  field (readonly ) travel_id;

  //Administrative Field read only
  field ( readonly ) last_changed_at, last_changed_by, created_at, created_by;

  //Mandatory field that are required to create travel
  field ( mandatory )  agency_id, customer_id, begin_date, end_date, overall_status, booking_fee, currency_code;
  mapping for zsmit_travel_m corresponding;

 // standard operations for travel entity
  create;
  update;
  delete;

  //Dynamic Instance Action control
  action (features : instance) acceptTravel result [1] $self;
  action (features : instance) rejectTravel result [1] $self;

  // instance factory action for copying travel instances
  factory action copyTravel [1];

  // internal action that is called by determinations
  internal action ReCalcTotalPrice;

  determination calculateTotalPrice on modify {create; field booking_fee, currency_code; }

  validation validateCustomer     on save { create; field customer_id; }
  validation validateAgency       on save { create; field agency_id; }
  validation validateDates        on save { create; field begin_date, end_date; }
  validation validateStatus       on save { create; field overall_status; }
  validation validateCurrencyCode on save { create; field currency_code; }
  validation validateBookingFee   on save { create; field booking_fee; }

// dynamic operation control
  association _Booking { create (features : instance); }
}


define behavior for zsmit_I_BOOKING_M alias booking
implementation in class zbp_smit_i_booking_m unique
persistent table zsmit_booking_m
lock dependent by _Traval
early numbering
authorization dependent by _Traval
etag master last_changedat
{

   // administrative fields: read only
  field ( readonly ) last_changedat;
  // static field control
  field ( mandatory ) carrier_id, connection_id, flight_date, booking_status;
  field ( readonly ) travel_id, booking_id;
 //mapping entity fields types with table field types
  mapping for zsmit_booking_m corresponding;

  // Fields that are mandatory for create but should be read-only afterwards
  field ( mandatory : create, readonly : update) booking_date, customer_id;
  field (mandatory) currency_code;
  update;
  //delete;
  association _BookSupplement { create(features : instance); }
  association _Traval { }
  // No actions defined for bookings
  validation validateStatus       on save { create; field booking_status; }
  validation validateCustomer     on save { create; field customer_id; }
  validation validateCurrencyCode on save { create; field currency_code;  }
  validation validateConnection   on save { create; field carrier_id, connection_id, flight_date; }
  validation validateFlightPrice  on save { create; field flight_price; }

// determination for calculation of total flight price
  determination calculateTotalPrice on modify { create;  field flight_price, currency_code; }

}

define behavior for zsmit_I_BookSuppl_M alias booksuppl
implementation in class zbp_smit_i_booksuppl_m unique
//persistent table zsmit_booksupl_m
with unmanaged save
lock dependent by _Travel
authorization dependent by _Travel
etag master last_changed_at
{
// administrative fields: read only
  field ( readonly ) last_changed_at;
  //........
  //Early Numbering
  field (mandatory) price, supplement_id, currency_code;
  field ( readonly ) travel_id, booking_id, booking_supplement_id;
  mapping for zsmit_booksupl_m corresponding;

  update;
  //delete;

  association _Travel { }
  association _Booking { }
  // No actions defined for booking Suppliments
  validation validateCurrencyCode on save { create; field currency_code; }
  validation validateSupplement   on save { create; field supplement_id; }
  validation validatePrice        on save { create; field price; }
// determination for calculation of total suppl. price
  determination calculateTotalPrice on modify {create;  field price, currency_code; }
}